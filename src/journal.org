#+TITLE: Informatica @ SEFA 2018/2019 - Diario delle lezioni

Qui potete trovare  tutte le informazioni riguardo  il contenuto delle
lezioni,  ed il  relativo  materiale. Tenete  d'occhio questa  pagina.


Qui potete trovare  tutte le informazioni riguardo  il contenuto delle
lezioni,  ed il  relativo  materiale. Tenete  d'occhio questa  pagina.
Il codice di alcune funzioni viste durante il corso si trova nel file:

- [[file:docs/infosefa.py][infosefa.py]] 

che  verrà  aggiornato durante  il  corso.

*Documenti di testo*: testi utilizzati per  gli esempi a lezione  sono copie
liberamente utilizzabili  di libri archiviati dal  progetto [[https://www.gutenberg.org/][Gutemberg]].
I file sono codificati in formato ='utf-8-sig'=.

  - [[file:docs/holmes.txt][The Adventures of Sherlock Holmes - Arthur Conan Doyle]] 
  - [[file:docs/alice.txt][Alice in Wonderland - Lewis Carrol]] 
  - [[file:docs/frankenstein.txt][Frankenstein - Mary Shelley]]
  - [[file:docs/mobydick.txt][Moby Dick - Herman Melville]] 
  - [[file:docs/prince.txt][Il Principe (Eng) - Nicolo Macchiavelli]] 
  - [[file:docs/treasure.txt][Treasure Island - Robert Louis Stevenson]] 

*Basi di dati*: 

- Registro automobilistico: una base di  dati popolata che viene usata
  nel manuale SQL del corso. 

  + ([[file:data/registro_automobilistico_db.sqlite][Formato SQLite]]) può essere aperto direttamente SQLite
  + ([[file:data/registro_automobilistico.sql][Comandi SQL]]) importabile in qualunque gestore di database.

- Chinook: una base  di dati popolata con informazioni  relative ad un
  negozio musicale, e rilasciata da [[https://github.com/lerocha/chinook-database][Luis Rocha]].

  + ([[file:data/chinook_db.sqlite][Formato SQLite]]) può essere aperto direttamente SQLite
  + ([[file:data/chinook.sql][Comandi SQL]]) importabile in qualunque gestore di database.

* COMMENT <2018-12-21 Fri> Lezione 26 - Conclusione 

  Ricapitoliamo il programma svolto durante  il corso, e discutiamo le
  modalità di esame. 

  Slide: ([[file:docs/lecture26-slides.pdf][schermo]]|[[file:docs/lecture26-print.pdf][stampa]])

* <2018-12-19 Wed> Lezione 25 - Ripasso

  Facciamo un  ripasso generale,  rivedendo i contenuti  delle lezioni
  e  dei laboratori  precedenti. Saranno  gli studenti  a decidere  su
  quali argomenti ritornare, compatibilmente con le due ore a disposizione.
  
* <2018-12-17 Mon> Laboratorio 9 - Integrare Python e SQL

  Vediamo come  si possano  interrogare basi di  dati (in  questo caso
  SQLite) utilizzando Python.

  Dovrete scrivere  una serie  di funzioni in  python, e  salvarle sul
  file =lab09.py=  in maniera  tale che  il lo  script =test_lab09.py=
  esegua   con   successo. Più precisamente dovrete:

  - salvare le vostre funzioni in un file =lab09.py=
  - scaricare il file =test_lab09.py=
  - eseguire, nella stessa cartella che li contiene
  
  : $ python3 test_lab09.py

  Slide: ([[file:docs/lab09-slides.pdf][schermo]]|[[file:docs/lab09-print.pdf][stampa]])

  File di test: [[file:docs/test_lab09.py][test_lab09.py]]

* <2018-12-14 Fri> Lezione 24 - SQL. Elementi più avanzati

  In  questa lezione  vediamo come  eseguire query  SQL che  calcolano
  funzioni  sulle  colonne  della   tabella:  i  cosiddetti  operatori
  aggregati (o funzioni di gruppo).  Concludiamo poi le lezioni su SQL
  con una  descrizione sommaria di  quelle caratteristiche di  SQL che
  non faremo in tempo a vedere.

  Letture: Sezioni 4.5, 4.6, 4.7 e Capitolo 7 del manuale SQL.

  Slide: ([[file:docs/lecture24-slides.pdf][schermo]]|[[file:docs/lecture24-print.pdf][stampa]])

* <2018-12-13 Thu> Lezione di recupero

  La  lezione  si  svolge  per  recuperare le  ore  perse  durante  il
  semestre.  Visto  che  la   lezione  è  stata  calendarizzata  fuori
  dall'orario canonico non faremo cose nuove ma rivedremo il materiale
  delle precedenti lezioni e chiariremo eventuali dubbi.

  Orario: 14:00–16:00, Aula 15 - CU 035

* <2018-12-12 mer> Lezione 23 - Query SQL. Combinare più tabelle   

  Vediamo  come  costruire query  SQL  che  combinano  i dati  di  più
  tabelle.  In  particolare  come utilizzare  il  prodotto  cartesiano
  e i  vari tipi di  operatori JOIN. Contestualmente vedremo  l'uso di
  foreign key per impostare vincoli di integrità referenziale.

  Letture: Capitoli 5 e 6 del Manuale di SQL.

  Slide: ([[file:docs/lecture23-slides.pdf][schermo]]|[[file:docs/lecture23-print.pdf][stampa]])

* <2018-12-10 lun> Laboratorio 8 - SQLite

  Vediamo come usare il comando SQLite  per accedere alle basi di dati
  di prova. In questo modo  potete cominciare ad esplorare questi dati
  usando comandi SQL. 

  Slide: ([[file:docs/lab08-slides.pdf][schermo]]|[[file:docs/lab08-print.pdf][stampa]])

* <2018-12-07 ven> Lezione 22 - Query SQL su singole tabelle

  Prima spieghiamo come  è strutturata una tabella  e come specificare
  vincoli  su di  essa.  Poi  vediamo come  effettuare  query SQL  che
  riguardino una  singola tabella,  in particolare le  espressioni che
  possono essere utilizzate nella clausola where e l'uso di order by.

  Letture: Sezioni 4.1, 4.2, 4.3, 4.8 del Manuale di SQL.

  Slide: ([[file:docs/lecture22-slides.pdf][schermo]]|[[file:docs/lecture22-print.pdf][stampa]])
  
* <2018-12-05 Wed> Lezione 21 - Introduzione alle basi di dati

  Introduciamo il concetto  di sistema informativo e di  base di dati.
  Facciamo  una   breve  panoramica  sui   metodi  e  sulle   fasi  di
  progettazione  di  una  base  di  dati,  e  sulle  problematiche  da
  affrontare. Introduciamo poi il  modello relazionale. e parliamo dei
  criteri di integrità e di  qualità di uno schema relazionale, basati
  sulle    dipendenze    funzionali    e    sulle    forme    normali.
  Discutiamo brevemente  le operazioni di manipolazioni  delle tabelle
  e di incrocio dei dati.

  Letture: Capitoli 1, 2 e 3 del Manuale SQL.

* <2018-12-03 Mon> Laboratorio 7 - Elaborazione di stringhe

  Dovrete scrivere  una serie  di funzioni in  python, e  salvarle sul
  file =lab07.py=  in maniera  tale che  il lo  script =test_lab07.py=
  esegua   con   successo. Più precisamente dovrete:

  - salvare le vostre funzioni in un file =lab07.py=
  - scaricare il file =test_lab07.py=
  - eseguire, nella stessa cartella che li contiene
  
  : $ python3 test_lab07.py

  Slide: ([[file:docs/lab07-slides.pdf][schermo]]|[[file:docs/lab07-print.pdf][stampa]])

  File di test: [[file:docs/test_lab07.py][test_lab07.py]]

* <2018-11-30 Ven> Lezione 20 - Ricerca in documenti di testo

  Vediamo  come  utilizzare  le  operazioni su  stringhe  e  file  per
  calcolare statistiche  su file di testo.  In particolare costruiremo
  una  funzione che  dati  alcuni  file, li  classifica  in base  alla
  frequenza con cui delle chiavi di ricerca occorrono al loro interno.

  Letture: Capitolo 11 del libro di testo. 

  Slide: ([[file:docs/lecture20-slides.pdf][schermo]]|[[file:docs/lecture20-print.pdf][stampa]])

* <2018-11-28 Wed> Lezione 19 - Uso di file e dati

  Le informazioni su  cui si lavora possono essere  salvati su supporti
  di memorizzazione  permanenti. Per  fare questo i  sistemi operativi
  forniscono il  concetto di  *file* vedremo  come leggere  e scrivere
  dati su file.

  Letture: paragrafi 10.1, 10.2, 10.3, 10.4, 10.5.

  Slide: ([[file:docs/lecture19-slides.pdf][schermo]]|[[file:docs/lecture19-print.pdf][stampa]])

* <2018-11-26 Mon> Laboratorio 6 - Dizionari e Tabelle di Dati

  Dovrete scrivere  una serie  di funzioni in  python, e  salvarle sul
  file =lab06.py=  in maniera  tale che  il lo  script =test_lab06.py=
  esegua   con   successo. Più precisamente dovrete:

  - salvare le vostre funzioni in un file =lab06.py=
  - scaricare il file =test_lab06.py=
  - eseguire, nella stessa cartella che li contiene
  
  : $ python3 test_lab06.py

  Slide: ([[file:docs/lab06-slides.pdf][schermo]]|[[file:docs/lab06-print.pdf][stampa]])

  File di test: [[file:docs/test_lab06.py][test_lab06.py]]

  Letture: 
  - Cap 9.1 del libro di python.
  - *nota  bene* la  nostra codifica  per  le tabelle  è *diversa*  da
    quella del Cap 9.3.

* <2018-11-23 ven> Lezione 18 - Ordinamenti a cascata e Radix sort

  Continuiamo  con algoritmi  di ordinamento  che funzionano  in tempo
  lineare. Introduciamo il radix sort, come sequenza di counting sort.

  ([[file:docs/lecture18.pdf][appunti]])

* <2018-11-21 mer> Lezione 17 - Equazioni di ricorrenza / Counting sort

  Discutiamo più  in generale come risolvere  equazioni di ricorrenza,
  e accenniamo al  Master Theorem. Poi discutiamo il  couting sort, un
  algoritmo di ordinamento che funziona in tempo lineare.

  ([[file:docs/lecture17.pdf][appunti]])

* <2018-11-19 Mon> Laboratorio 5 - Grafici di tempi di esecuzione

  Oggi proviamo a fare dei grafici che indichino i tempi di esecuzione
  di algoritmi. Quale sarà il più veloce?

  Slide: ([[file:docs/lab05-slides.pdf][schermo]]|[[file:docs/lab05-print.pdf][stampa]])

* <2018-11-16 ven> Lezione 16 - Mergesort (cont.) e equazioni di ricorrenza

  Terminiamo  la spiegazione  di  Mergesort, ed  in particolare  della
  funzione  che  fonde  due   sequenze  ordinate.  Per  analizzare  il
  Mergesort  facciamo ricorso  alle equazioni  di ricorrenza.

  ([[file:docs/lecture16.pdf][appunti]])

* <2018-11-14 mer> Lezione 15 - Struttura a pile e Mergesort

  Oggi vediamo  il Mergesort,  un algoritmo  di ordinamento  per ``per
  confronto''   che   raggiunge  l'efficienza   asintotica   ottimale.
  Prima però discutiamo un po' della struttura dati di pila (o stack).

  ([[file:docs/lecture15.pdf][appunti]])

  Questionario: [[http://bit.ly/INFO2018-15][bit.ly/INFO2018-15]]

* <2018-11-12 lun> Laboratorio 4 - Esercitazione

  Dovrete scrivere  una serie  di funzioni in  python, e  salvarle sul
  file =lab04.py=  in maniera  tale che  il lo  script =test_lab04.py=
  esegua   con   successo. Più precisamente dovrete:

  - salvare le vostre funzioni in un file =lab04.py=
  - scaricare il file =test_lab04.py=
  - eseguire, nella stessa cartella che li contiene
  
  : $ python3 test_lab04.py

  Slide: ([[file:docs/lab04-slides.pdf][schermo]]|[[file:docs/lab04-print.pdf][stampa]])

  File di test: [[file:docs/test_lab04.py][test_lab04.py]]

* <2018-11-09 Fri> Lezione 14 - Bubblesort e ordinamenti per confronti

  Oggi vediamo  il Bubblesort,  un algoritmo classico  di ordinamento.
  Successivamente   discutiamo   gli  algoritmi   ``per   confronto'',
  e  vediamo che  questi  non possono  essere resi  più  veloci di  un
  certo limite.

  Slide: ([[file:docs/lecture14-slides.pdf][schermo]]|[[file:docs/lecture14-print.pdf][stampa]])

* <2018-10-31 Wed> Lezione 13 - Ordinamenti e crescita della complessità

  Introduciamo il concetto  di complessità di un  algoritmo. Per farlo
  discutiamo due semplici algoritmi di ordinamento, e poi introduciamo
  la notazione asintotica.

  ([[file:docs/lecture13.pdf][appunti]])

* <2018-10-26 ven> Lezione 12 - Efficienza computazionale

  Introduciamo un  paio di esempi  di ricerca binaria,  per illustrare
  l'enorme differenza  di prestazioni  tra ricerca lineare  e binaria.
  Questo ci fornisce la scusa per cominciare a discutere di efficienza
  computazionale.

  ([[file:docs/lecture12.pdf][appunti]])

* <2018-10-24 mer> Lezione 11 - Soluzione degli esercizi del laboratorio 3

  La  lezione   consisterà  nella   risoluzione  degli   esercizi  del
  laboratorio 3. Poiché il laboratorio deve essere fatto con la classe
  divisa in due, usiamo una delle lezioni di teoria (a classe riunita)
  per mostrare la soluzione.

  Slide: ([[file:docs/lecture11-slides.pdf][schermo]]|[[file:docs/lecture11-print.pdf][stampa]])

  File di test: [[file:docs/test_lab03.py][test_lab03.py]]

* <2018-10-22 Mon> Laboratorio 3 - Esercitazione

  Dovrete scrivere  una serie  di funzioni in  python, e  salvarle sul
  file =lab03.py=  in maniera  tale che  il lo  script =test_lab03.py=
  esegua   con   successo. Più precisamente dovrete:

  - salvare le vostre funzioni in un file =lab03.py=
  - scaricare il file =test_lab03.py=
  - eseguire, nella stessa cartella che li contiene
  
  : $ python3 test_lab03.py

  Slide: ([[file:docs/lab03-slides.pdf][schermo]]|[[file:docs/lab03-print.pdf][stampa]])

  File di test: [[file:docs/test_lab03.py][test_lab03.py]]


* <2018-10-19 Fri> Lezione 10 - Cicli =for= su intervalli e cicli =while=

  Abbiamo  continuato a  discutere  le iterazioni  su  sequenze, e  in
  particolare  i cicli  =for=  su intervalli  di  interi. Poi  abbiamo
  introdotto i cicli =while=.

  Slide: ([[file:docs/lecture10-slides.pdf][schermo]]|[[file:docs/lecture10-print.pdf][stampa]])

  Letture: Cap 6 e 7. Libro di Python. 

* <2018-10-17 Wed> Lezione 9 - Iterazioni su sequenze

  Abbiamo  visto  una serie  di  ulteriori  operazioni per  manipolare
  le sequenze.  Abbiamo introdotto  le iterazioni  su sequenze,  e più
  esplicitamente il ciclo =for=.

  Slide: ([[file:docs/lecture09-slides.pdf][schermo]]|[[file:docs/lecture09-print.pdf][stampa]])

  Questionario: [[http://bit.ly/INFO2018-09a][bit.ly/INFO2018-09a]]

  Letture: Cap 7.1, 7.3, 8.4, 8.5. Libro di Python. 

* <2018-10-15 Mon> Laboratorio 2 - Esercizi in laboratorio

  Dovrete scrivere  una serie  di funzioni in  python, e  salvarle sul
  file =lab02.py=  in maniera  tale che  il lo  script =test_lab02.py=
  esegua   con   successo. Più precisamente dovrete:

  - salvare le vostre funzioni in un file =lab02.py=
  - scaricare il file =test_lab02.py=
  - eseguire, nella stessa cartella che li contiene
  
  : $ python3 test_lab02.py

  Slide: ([[file:docs/lab02-slides.pdf][schermo]]|[[file:docs/lab02-print.pdf][stampa]])

  File di test: [[file:docs/test_lab02.py][test_lab02.py]]

* <2018-10-12 Fri> Lezione 8 - Gestione degli Errori e Sequenze di dati

  Abbiamo parlato  della gestione  degli errori  in Python,  e abbiamo
  introdotto  le sequenze.  In  particolare abbiamo  descritto i  tipi
  lista e tupla, ed alcune delle loro caratteristiche principali.

  Slide: ([[file:docs/lecture08-slides.pdf][schermo]]|[[file:docs/lecture08-print.pdf][stampa]])

  Letture: Cap 6. Libro di python


* <2018-10-10 Wed> Lezione 7 - Strutturare il codice

  Abbiamo  discusso  alcuni elementi  del  linguaggio  python come  il
  valore  =None=,  la struttura  del  codice  all'interno di  un  file
  (indentazione) e quella  in file multipli (i  moduli). Abbiamo visto
  come le precedenze degli operatori vadano a infuenzare e definire la
  valutazione di espressioni.

  Slide: ([[file:docs/lecture07-slides.pdf][schermo]]|[[file:docs/lecture07-print.pdf][stampa]])

  Questionario: [[http://bit.ly/INFO2018-07a][bit.ly/INFO2018-07a]]
  
  Letture: Cap 4 e Par 5.5. Libro di python


* <2018-10-08 Mon> Laboratorio 1 - Esercizi e test

  Dovrete scrivere  una serie  di funzioni in  python, e  salvarle sul
  file =lab01.py=  in maniera  tale che  il lo  script =test_lab01.py=
  esegua   con   successo. Più precisamente dovrete:

  - salvare le vostre funzioni in un file =lab01.py=
  - scaricare il file =test_lab01.py=
  - eseguire, nella stessa cartella che li contiene
  
  : $ python3 test_lab01.py

  Slide: ([[file:docs/lab01-slides.pdf][schermo]]|[[file:docs/lab01-print.pdf][stampa]])

  File di test: [[file:docs/test_lab01.py][test_lab01.py]]

* <2018-10-05 ven> Lezione 6 - Esecuzione condizionale ed espressioni logiche

  Abbiamo introdotto i costrutti =if=, =elif=, =else= per l'esecuzione
  condizionale di codice. Contestualmente abbiamo visto le espressioni
  e  gli   operatori  che   operano  of  producono   valori  booleani.
  Per  completare   la  trattazione   abbiamo  discusso   elementi  di
  logica booleana.

  Slide: ([[file:docs/lecture06-slides.pdf][schermo]]|[[file:docs/lecture06-print.pdf][stampa]])

  Questionario: [[http://bit.ly/INFO2018-06a][bit.ly/INFO2018-06a]]
  
  Letture: Cap 5. Libro di python


* <2018-10-03 mer> Lezione 5 - Elementi del linguaggio python

  Vediamo come  usare Python  come una  calcolatrice e  per manipolare
  i  tipi numerici  più semplici.  Poi vediamo  l'uso delle  variabili
  e l'uso delle stringhe.

  Slide: ([[file:docs/lecture05-slides.pdf][schermo]]|[[file:docs/lecture05-print.pdf][stampa]])
  
  Letture: Cap 3. Libro di python

* <2018-10-01 Mon> Lezione 4 - Tutorial del terminale

  Abbiamo visto come muoverci tra i file del computer usando i comandi
  del  terminale. Contestualmente  abbiamo  cercato di  far girare  il
  nostro   primo  esempio   di   codice  python   dalle  slide   della
  lezione scorsa.

  Tutorial (file rivisitato della Lezione 1): ([[file:docs/lecture01b-slides.pdf][schermo]]|[[file:docs/lecture01b-print.pdf][stampa]])
  
  Questionario: [[http://bit.ly/INFO2018-04a][bit.ly/INFO2018-04a]]

* <2018-09-28 Fri> Lezione 3 - Programmi

  Abbiamo descritto a  grandi linee come opera una CPU  nel modello di
  von  Neumann.  Abbiamo  quindi   visto  come  sia  importante  avere
  linguaggi  di  alto  livello.  Questi  permattono  "astrazioni"  più
  potenti.   L'astrazione  è   un   concetto   che  abbiamo   definito
  contestualmente.  Abbiamo  descritto  la  differenza  tra  linguaggi
  compilati  e   interpretati,  così   come  tra  linguaggi   di  alto
  e basso livello. Abbiamo introdotto brevemente Python e SQL, e detto
  cosa sono variabili e funzioni in contesto di Python.
  
  Questionari:
  - Rappresentazione dei dati: [[https://bit.ly/INFO2018-02d][bit.ly/INFO2018-02d]]
  - Programmazione e Astrazione http://bit.ly/INFO2018-03a
  
  Slide: ([[file:docs/lecture03-slides.pdf][schermo]]|[[file:docs/lecture03-print.pdf][stampa]])

* <2018-09-26 Wed> Lezione 2 - Dati e programmi

  Abbiamo accennato  ad alcuni elementi della  storia dei calcolatori,
  da Babbage a  Turing passando per von Neumann.  Dopodiché la lezione
  si  è concentrata  prima  sulla  codifica di  dati,  ovvero di  come
  vengano codificati numeri  interi in binario e  esadecimale, e testi
  in  ASCII, ASCII  esteso, e  UTF-8.  Sono stati  fatti anche  esempi
  riguardanti la codifica di immagini e segnali.
   
  Questionari:
  - Feedback logistico [[https://bit.ly/INFO2018-02a][bit.ly/INFO2018-02a]]
  - Storia e architettura dei calcolatori: [[https://bit.ly/INFO2018-02c][bit.ly/INFO2018-02c]]
  
  Slide: ([[file:docs/lecture02-slides.pdf][schermo]]|[[file:docs/lecture02-print.pdf][stampa]])

  Letture: Cap 1. Libro di python
 
* <2018-09-24 Mon> Lezione 1 - Introduzione

  Abbiamo introdotto il corso,  fornendo le informazioni logistiche di
  base. Poi abbiamo visto come  effettuare i primi passi nell'ambiente
  linux  del  laboratorio: come  trovare  i  programmi necessari  allo
  svolgimento delle esercitazioni e come utilizzare il terminale.
   
  Questionario: [[https://bit.ly/INFO2018-01][bit.ly/INFO2018-01]]
  
  Slide: ([[file:docs/lecture01-slides.pdf][schermo]]|[[file:docs/lecture01-print.pdf][stampa]])
  
  Tutorial: ([[file:docs/lecture01b-slides.pdf][schermo]]|[[file:docs/lecture01b-print.pdf][stampa]])

  Letture: Cap 1. Libro di python
